-- db 목록 보기 -- 
show databases;
 
-- db 사용 선언 --
use dx0717;

-- 현재 접속 유저 확인 --
SELECT USER();

-- 현재 사용 db 확인 --
SELECT DATABASE();

-- CAST 예제 --
-- 숫자-> 문자 --

-- 문자 -> 숫자 --


-- NULL 관련 함수 --

-- EMP에서 ENAME, SAL, COMM, 그리고 SAL+ COMM 수령액으로 조회 --
-- COMM NULL이면 0으로 출력 --
SELECT ENAME, SAL, COMM, IFNULL(COMM,0) + SAL AS 수령액
FROM EMP;

-- COMM과 SAL 중 NULL이 아닌 첫번째 값 리턴 --
SELECT COALESCE(COMM,SAL)
FROM EMP;


-- GROUPING 함수--

-- 집계함수는 NULL 제외 --
SELECT COUNT(EMPNO)
FROM EMP;

-- EMP 테이블의 ENAME과 데이터 개수 조회 -- ->에러
SELECT ENAME, COUNT(*) -- 데이터의 개수가 달라서 조회 불가 --
FROM EMP;

-- GROUP BY 기준 열 외의 컬럼이나 연산식 조회 할 시 행의 개수가 달라 조회 에러 --
SELECT DEPNO, ENAME, AVG(SAL) -- ENAME은 행 수가 달라서 에러 --
FROM EMP
GROUP BY DEPNO;

-- HAVING 절 --
-- EMP 테이블에서 DEPTNO가 5번 이상 나오는 경우 DEPTNO와 SAL 평균 조회 --
SELECT DEPTNO, AVG(SAL)
FROM EMP
GROUP BY DEPTNO
HAVING COUNT(DEPTNO) >=5;

-- tStaff 테이블에서 depart가 인사과나 영업부인 데이터의 depart와 salary 최댓값
SELECT depart, MAX(salary)
FROM tStaff
WHERE depart IN ('인사과','영업부')
GROUP BY depart;


-- 순위함수 --

-- EMP에서 SAL이 많은 순서부터 일련번호 부여하여 ENAME, SAL 조회-- 
SELECT ROW_NUMBER() OVER(ORDER BY SAL DESC) AS '급여순' ,ENAME, SAL 
FROM EMP;

-- 그룹으로 분할: 4등분 --
SELECT NTILE(4) OVER(ORDER BY SAL DESC) AS '급여순' ,ENAME, SAL 
FROM EMP;

-- 파티션 이용 --
-- EMP에서 DEPTNO별 SAL이 많은 순서부터 일련번호 부여하여 ENAME, SAL 조회-- 
SELECT DEPTNO, DENSE_RANK() OVER(PARTITION BY DEPTNO ORDER BY SAL DESC) AS '급여순' ,ENAME, SAL 
FROM EMP
ORDER BY DEPTNO;

-- EMP 테이블 SAL 내림차순 정렬 후 다음 데이터와 SAL의 차이 출력 --
SELECT ENAME,SAL,SAL-(LEAD(SAL,1) OVER(ORDER BY SAL DESC)) AS '급여차'
FROM EMP
ORDER BY SAL DESC;

-- EMP 테이블 SAL 오름차순 정렬 후 가장 작은 데이터와 SAL의 차이 출력 --
SELECT ENAME,SAL,SAL-(FIRST_VALUE(SAL) OVER(ORDER BY SAL)) AS '급여차'
FROM EMP
ORDER BY SAL;

-- 급여의 누적 백분율 확인 -- 
SELECT ENAME,SAL,ROUND(CUME_DIST() OVER(ORDER BY SAL DESC)*100) AS '누적급여 백분율'
FROM EMP
ORDER BY SAL DESC;

-- PIVOT 이용하여 JOB별 DEPTNO별 SAL 합계 조회 --
SELECT JOB,
	SUM(IF(DEPTNO=10,SAL,0)) AS '10',
	SUM(IF(DEPTNO=20,SAL,0)) AS '20',
	SUM(IF(DEPTNO=30,SAL,0)) AS '30',
	SUM(SAL) AS 'TOTAL'
FROM EMP
GROUP BY JOB;

-- JSON으로 출력 --
SELECT JSON_OBJECT('ename', ENAME, 'sal', SAL) AS "JSON 조회"
FROM EMP


-- SET 구문 --

-- EMP 테이블과 DEPT 테이블에서 DEPTNO 합집합 --
SELECT DISTINCT DEPTNO
FROM EMP
UNION ALL
SELECT DISTINCT DEPTNO
FROM DEPT;

-- EMP 테이블에 없고 DEPT 테이블에 있는 DEPTNO 차집합 --
SELECT DISTINCT DEPTNO
FROM DEPT
EXCEPT
SELECT DISTINCT DEPTNO
FROM EMP;

-- 서브쿼리 예시
-- ENAME이 MILLER인 사원의 DNAME 조회 --
SELECT DNAME
FROM DEPT
WHERE DEPTNO=(SELECT DEPTNO FROM EMP WHERE ENAME='MILLER'); 

-- 서브쿼리 예시
SELECT ENAME, SAL
FROM EMP
WHERE SAL>(SELECT AVG(SAL) FROM EMP);

-- 서브쿼리 예시
SELECT ENAME, JOB
FROM EMP
WHERE JOB=(SELECT JOB FROM EMP WHERE ENAME='MILLER') AND ENAME!='MILLER';

-- 서브쿼리 예시
SELECT ENAME,SAL
FROM EMP
WHERE DEPTNO=(SELECT DEPTNO  FROM DEPT WHERE LOC ='DALLAS')

-- DEPTNO 별 SAL의 최댓값과 동일한 SAL값 가지는 데이터의 EMPNO, ENAME, SAL 조회
SELECT EMPNO, ENAME, SAL
FROM EMP
WHERE SAL IN (SELECT MAX(SAL)
FROM EMP
GROUP BY DEPTNO)

-- DEPTNO가 30인 모든 데이터들의 SAL보다 큰 SAL을 가진 경우 조회 
SELECT ENAME, SAL
FROM EMP
WHERE SAL> ALL (SELECT SAL
				FROM EMP
				WHERE DEPTNO =30)

-- EMP에서 SAL이 2000넘는 데이터가 있으면 ENAME과 SAL 조회
SELECT  ENAME, SAL
FROM EMP
WHERE EXISTS(SELECT 1 FROM EMP WHERE SAL>2000);


-- JOIN
-- Cartesian Product
SELECT *
FROM EMP, DEPT;

-- EQUI JOIN
SELECT *
FROM EMP, DEPT
WHERE EMP.DEPTNO=DEPT.DEPTNO; 

-- 테이블 명 명시
SELECT EMP.DEPTNO, LOC, DNAME
FROM EMP, DEPT
WHERE EMP.DEPTNO=DEPT.DEPTNO; 

-- 테이블 명 바꾸기
SELECT e.DEPTNO, LOC, DNAME
FROM EMP e, DEPT d
WHERE e.DEPTNO=d.DEPTNO; 

-- HASH JOIN
SELECT /*+ORDERED USE_HASH(d) */
		e.DEPTNO, LOC, DNAME
FROM DEPT d, EMP e 
WHERE e.DEPTNO=d.DEPTNO; 

-- NON EQUI JOIN
-- EMP 테이블에서 ENAME과 SAL 조회하고 SAL 해당 GRADE 조회
SELECT ENAME, SAL, GRADE
FROM EMP, SALGRADE
WHERE SAL BETWEEN LOSAL AND HISAL;


-- SELF JOIN --
-- EMP 테이블에서 ENAME이 MILLER인 사원의 관리자 이름을 조회
SELECT employee.ENAME, manager.ENAME 
FROM EMP employee, EMP manager
WHERE employee.MGR=manager.EMPNO 

-- ANSI JOIN 
-- ANSI CROSS JOIN
SELECT *
FROM EMP CROSS JOIN DEPT;

-- ANSI INNER JOIN + ON
SELECT *
FROM EMP INNER JOIN DEPT
ON EMP.DEPTNO =DEPT.DEPTNO;  

-- ANSI INNER JOIN + USING
SELECT *
FROM EMP INNER JOIN DEPT
USING(DEPTNO);  

-- NATURAL JOIN 
SELECT *
FROM EMP NATURAL JOIN DEPT;

-- LEFT OUTER JOIN -> EMP에 존재하는 모든 DEPTNO 포함
SELECT *
FROM EMP LEFT OUTER JOIN DEPT
ON EMP.DEPTNO = DEPT.DEPTNO; 

-- FULL OUTER JOIN 구현
SELECT *
FROM EMP RIGHT OUTER JOIN DEPT
ON EMP.DEPTNO = DEPT.DEPTNO

UNION 

SELECT *
FROM EMP LEFT OUTER JOIN DEPT
ON EMP.DEPTNO = DEPT.DEPTNO














